import OpenAI from 'openai';

// OpenAI API key
const openai = new OpenAI({
  apiKey: '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'
});

/**
 * Correct transcription errors using typed instructions
 * @param {string} originalTranscript - The full text generated by Whisper
 * @param {string} correction - Typed instruction for correction (e.g., "Change name to James", "Remove fever")
 * @returns {Promise<string>} Corrected transcript text
 */
export async function correctTranscript(originalTranscript, correction) {
  try {
    console.log('üîß Applying transcript correction...');
    console.log(`Original length: ${originalTranscript.length} characters`);
    console.log(`Correction instruction: "${correction}"`);

    // Validate inputs
    if (!originalTranscript || typeof originalTranscript !== 'string') {
      throw new Error('Invalid original transcript provided');
    }

    if (!correction || typeof correction !== 'string') {
      throw new Error('Invalid correction instruction provided');
    }

    // Use GPT to apply the correction
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are a transcription editor. Apply the correction instruction to the given transcript. Do not change anything else. Keep the medical meaning and flow intact. Return only the corrected transcript text without any additional commentary or formatting."
        },
        {
          role: "user",
          content: `Original transcript: "${originalTranscript}"

Correction instruction: "${correction}"

Apply this correction to the transcript and return the updated text.`
        }
      ],
      temperature: 0.1, // Low temperature for consistent corrections
      max_tokens: 2000
    });

    const correctedTranscript = completion.choices[0].message.content.trim();

    // Validate the corrected transcript
    if (!correctedTranscript || correctedTranscript.length === 0) {
      console.warn('‚ö†Ô∏è GPT returned empty correction, using original transcript');
      return originalTranscript;
    }

    // Check if the correction seems reasonable (not too different in length)
    const lengthDifference = Math.abs(correctedTranscript.length - originalTranscript.length);
    const maxAllowedDifference = originalTranscript.length * 0.5; // Allow 50% length change

    if (lengthDifference > maxAllowedDifference) {
      console.warn('‚ö†Ô∏è Correction resulted in significant length change, using original transcript');
      return originalTranscript;
    }

    console.log('‚úÖ Transcript correction applied successfully');
    console.log(`Corrected length: ${correctedTranscript.length} characters`);
    
    return correctedTranscript;

  } catch (error) {
    console.error('‚ùå Transcript correction error:', error.message);
    console.log('üîÑ Falling back to original transcript');
    return originalTranscript;
  }
}

/**
 * Process medical audio with optional transcript correction
 * @param {string} audioFileName - Name of the audio file
 * @param {string} correction - Optional correction instruction
 * @returns {Promise<Object>} Medical processing result with corrected transcript
 */
export async function processMedicalAudioWithCorrection(audioFileName, correction = null) {
  try {
    // Import the medical transcriber
    const { processMedicalAudio } = await import('./medicalTranscriber.js');
    
    // First, get the original transcript (we need to modify medicalTranscriber to expose this)
    console.log('üéØ Getting original transcript...');
    const transcriptResult = await getTranscriptOnly(audioFileName);
    
    if (transcriptResult.error) {
      throw new Error(`Transcription failed: ${transcriptResult.error}`);
    }

    let finalTranscript = transcriptResult.transcript;

    // Apply correction if provided
    if (correction && correction.trim()) {
      console.log('üîß Applying user correction...');
      finalTranscript = await correctTranscript(transcriptResult.transcript, correction);
    }

    // Generate medical analysis from the final transcript
    console.log('üè• Generating medical analysis from corrected transcript...');
    const medicalResult = await generateMedicalAnalysisFromTranscript(finalTranscript);

    return {
      originalTranscript: transcriptResult.transcript,
      correctedTranscript: finalTranscript,
      correction: correction,
      medicalData: medicalResult,
      success: true
    };

  } catch (error) {
    console.error('‚ùå Medical processing with correction error:', error.message);
    return {
      error: error.message,
      success: false
    };
  }
}

/**
 * Get transcript only (helper function)
 * @param {string} audioFileName - Name of the audio file
 * @returns {Promise<Object>} Transcript result
 */
async function getTranscriptOnly(audioFileName) {
  try {
    const { transcribeAudio } = await import('./medicalTranscriber.js');
    const transcript = await transcribeAudio(audioFileName);
    
    return {
      transcript: transcript,
      success: true
    };
  } catch (error) {
    return {
      error: error.message,
      success: false
    };
  }
}

/**
 * Generate medical analysis from transcript text
 * @param {string} transcript - The transcript text
 * @returns {Promise<Object>} Medical analysis result
 */
async function generateMedicalAnalysisFromTranscript(transcript) {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are an expert medical assistant AI with extensive clinical knowledge and a strong focus on patient safety. You help doctors by providing comprehensive medical documentation and practical clinical guidance. Always prioritize patient safety by including appropriate warnings, contraindications, maximum dosing limits, and emergency instructions. Never suggest potentially dangerous medication protocols without proper safety guidelines. Provide detailed, clinically appropriate recommendations with clear safety parameters. When prescribing emergency medications like nitroglycerin, always include the proper emergency protocol and when to seek immediate medical care."
        },
        {
          role: "user",
          content: `You are an expert medical assistant AI. Analyze this medical transcript and provide a comprehensive response that helps doctors, patients, and pharmacists.

Transcript: "${transcript}"

IMPORTANT: Generate detailed, practical information for each section. Do not leave any section empty or vague.

CRITICAL SAFETY REQUIREMENTS FOR PRESCRIPTIONS:
- Always include clear dosing instructions with maximum daily limits
- For PRN (as needed) medications, specify maximum frequency and total daily dose
- Include specific safety warnings and contraindications
- For emergency medications like nitroglycerin, provide clear protocols
- Never suggest dangerous dosing patterns without proper medical supervision

Provide a complete medical response with:

1. SOAP NOTE (Medical Documentation):
   - Subjective: Patient's symptoms, complaints, history, concerns they mentioned
   - Objective: Physical findings, vital signs, examination results, observable data
   - Assessment: Clinical diagnosis, differential diagnosis, medical impression
   - Plan: Treatment approach, management strategy, medical recommendations

2. SUMMARY: 1-2 sentences summarizing the key medical findings and plan

3. PRESCRIPTION SHEET (For Pharmacist & Patient):
   Format each medicine exactly like this:
   ‚Ä¢ Medicine Name (Strength/Dosage Form)
      - Dosage: [How much, how often, when to take]
      - Duration: [How many days/weeks]
      - Maximum: [Daily/weekly limits for safety]
      - Instructions: [Special instructions, food interactions, timing]
      - ‚ö†Ô∏è Warning: [Important safety information]
   
   SAFETY GUIDELINES:
   - For nitroglycerin: Specify emergency protocol (1 dose every 5 minutes, max 3 doses, then seek emergency care)
   - For pain medications: Include maximum daily dose and addiction warnings
   - For antibiotics: Emphasize completing full course
   - Include drug interactions and contraindications
   - Specify when to stop medication and seek medical help

4. FOLLOW-UP REMINDER (For Patient & Doctor):
   ‚Ä¢ When: [Specific timeframe with clear reasoning]
   ‚Ä¢ Reason: [Why follow-up is needed - monitor progress, check response, adjust treatment]
   ‚Ä¢ Warning signs: [Specific symptoms requiring immediate medical attention]
   ‚Ä¢ Emergency: [When to call 911 or go to ER immediately]

5. NEXT STEP SUGGESTIONS (For Doctor & Patient):
   ‚Ä¢ Laboratory tests: [Specific tests with timing and reasoning]
   ‚Ä¢ Imaging: [Specific studies if clinically indicated]
   ‚Ä¢ Specialist referral: [Which specialist and urgency level]
   ‚Ä¢ Monitoring: [What to track, how often, normal vs concerning values]
   ‚Ä¢ Lifestyle: [Specific modifications with measurable goals]

CRITICAL: Prioritize patient safety. Include appropriate warnings, contraindications, and emergency instructions for all medications and treatments.

Return response in this exact JSON format:
{
  "SOAP_Note": {
    "Subjective": "Detailed patient complaints and history...",
    "Objective": "Physical examination findings and vital signs...",
    "Assessment": "Clinical diagnosis and medical impression...",
    "Plan": "Treatment plan and management approach..."
  },
  "summary": "Brief summary of condition and treatment plan...",
  "prescription": "‚Ä¢ Medicine Name (Strength)\\n   - Dosage: Safe dosing instructions\\n   - Duration: Time period\\n   - Maximum: Daily/weekly limits\\n   - Instructions: Special notes\\n   - ‚ö†Ô∏è Warning: Safety information\\n\\n‚Ä¢ Additional medicines with complete safety info...",
  "followUp": "‚Ä¢ When: Specific timeframe\\n‚Ä¢ Reason: Why follow-up needed\\n‚Ä¢ Warning signs: Symptoms requiring immediate attention\\n‚Ä¢ Emergency: When to seek immediate care",
  "nextSteps": "‚Ä¢ Laboratory: Specific tests with timing\\n‚Ä¢ Imaging: Studies if needed\\n‚Ä¢ Monitoring: What to track and how often\\n‚Ä¢ Lifestyle: Specific modifications\\n‚Ä¢ Emergency plan: Clear instructions for urgent situations"
}`
        }
      ],
      temperature: 0.2,
      max_tokens: 2000
    });

    const response = completion.choices[0].message.content;
    const medicalResult = JSON.parse(response);
    
    return medicalResult;

  } catch (error) {
    console.error("Medical analysis generation error:", error.message);
    throw error;
  }
}

// CLI Test function
if (import.meta.url === `file://${process.argv[1]}`) {
  // Test the correction functionality
  const testTranscript = "The patient has reported hypotension and feels dizzy. Blood pressure is 90 over 60.";
  const testCorrection = "Change hypotension to hypertension and change 90 over 60 to 150 over 90";
  
  console.log('üéØ Testing Transcript Correction...');
  console.log(`Original: "${testTranscript}"`);
  console.log(`Correction: "${testCorrection}"`);
  
  correctTranscript(testTranscript, testCorrection)
    .then(corrected => {
      console.log('\n‚úÖ Correction test complete!');
      console.log(`Corrected: "${corrected}"`);
    })
    .catch(err => {
      console.error('‚ùå Correction test failed:', err.message);
    });
}